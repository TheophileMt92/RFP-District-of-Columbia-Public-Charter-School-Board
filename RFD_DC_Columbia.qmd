---
title: "Proposal for DC PCSB’s ASPIRE Reporting Project"
author: "Théophile L. Mouton"
date: "March 24, 2025"
output:
  html:
    theme: cosmo
    toc: true
    toc-location: right
    css: style.css
    output-file: "Proposal for DC PCSB’s ASPIRE Reporting Project"
    toc-title: "Contents"
    toc-depth: 2
    self-contained: true
    code-fold: true
    code-tools: true
    highlight-style: solarized-light
editor: visual
execute:
  warning: false
  message: false
  echo: true
---

## 1. Introduction

**\[Our Organization/Team Name\]** is pleased to submit this proposal in response to the DC Public Charter School Board’s (DC PCSB) request for proposals (RFP) for the development of public-facing web-based ASPIRE outcome reports. Our team has extensive experience in creating dynamic, responsive, and accessible data reporting platforms. We are confident in our ability to deliver high-quality HTML-based reports, leveraging Quarto, Python, and SQL, to meet and exceed DC PCSB’s needs.

## 2. Understanding of the Project

We understand that DC PCSB requires two types of ASPIRE outcome reports for each public charter school campus in Washington, D.C.:

-   **Type 1 Reports**: Educate the public about the ASPIRE system and display ASPIRE Measure Rates by student subgroup.
-   **Type 2 Reports**: Include the content of Type 1 reports along with ASPIRE Measure Scores, Measure Floors, and Targets.

Additionally:

-   Reports will be generated using Quarto scripts, Python, and SQL, and hosted within DC PCSB’s GitLab repository.
-   Reports should use progressive disclosure to organize information and must be mobile-friendly and ADA-compliant.
-   All data will be provided in publication-ready tables from DC PCSB’s AWS Data Warehouse.
-   The project involves creating dynamic views to handle variability across frameworks and schools, with attention to missing or suppressed data scenarios.

Our team is well-equipped to meet these technical and functional requirements while adhering to DC PCSB’s standards for accessibility, maintainability, and user-centered design.

## 3. Our Approach

### 3.1 Project Management

Our team will assign an experienced **Product Manager** to oversee all aspects of this project. The Product Manager will:

-   Serve as the primary point of contact for DC PCSB.
-   Conduct sprint planning, manage feedback loops, and ensure timely delivery of all deliverables.
-   Oversee quality assurance (QA) testing for data, functionality, and visual design.
-   Facilitate regular presentations during the Data Team’s Sprint Review meetings.

### 3.2 Development Process

We propose the following phased approach to deliver the reports:

## 3.3 Technical Implementation of Reporting Structures

### Understanding the Data Architecture

Based on DC PCSB's requirements, we recognize that the reporting structure follows a hierarchical organization:

- **Primary Organization**: Reports are primarily organized by a combination of school and ASPIRE framework. While most schools use a single framework, our implementation will accommodate cases where a school requires multiple frameworks.

- **Framework Components**: Each of the 12 ASPIRE frameworks consists of:
  - 9-22 measures organized into 3-4 categories
  - Most measures evaluated across 11 student subgroups
  - Unique combinations of categories and measures per framework

### Implementation Strategy

Our technical approach to implementing these complex reporting structures includes:

#### 1. Framework-Specific Templates

We will develop customized templates for each of the 12 ASPIRE frameworks, recognizing that each has a distinct combination of categories and measures. Our Quarto templates will:

- Maintain consistent visual design across frameworks
- Adapt to the specific number of categories (3-4) in each framework
- Accommodate varying numbers of measures (9-22) per framework
- Handle dynamic rendering of subgroup data

#### 2. Hierarchical Data Navigation

Reports will follow a clear, intuitive hierarchy:
- Categories at the top level
- Measures within each category
- Student subgroups within each measure

This structure will be implemented using progressive disclosure techniques, allowing users to navigate from high-level category summaries to detailed subgroup information.

#### 3. School-Customizable Sections

Our implementation will specifically address the requirement for school-determined measures:

- For the customizable category in each framework, our code will dynamically generate appropriate measure names, descriptions, and visualizations
- The system will adapt to either single or multiple subgroups for reporting in these customized sections
- Visualization types will be determined programmatically based on the nature of the selected measures

#### 4. School-Framework Selection Interface

We will develop an intuitive interface allowing users to:
- Select a specific school
- Choose an applicable ASPIRE framework from those available for the selected school
- Navigate seamlessly between multiple frameworks when applicable to a single school

This implementation strategy ensures we deliver a reporting system that faithfully represents DC PCSB's complex data architecture while maintaining usability and clarity for end users.

#### 1. Phase 1: Planning and Design

-   Collaborate with DC PCSB to finalize reporting templates for the 12 ASPIRE frameworks.
-   Create a cohesive design system using a Cascading Style Sheet (CSS) or branded YAML file for consistent aesthetics.
-   Ensure compliance with ADA accessibility guidelines (e.g., color contrast, alternative text, dynamic links).

#### 2. Phase 2: Development

-   Build Quarto scripts integrated with Python and SQL to generate HTML reports based on the provided data.
-   Develop progressive disclosure features, such as collapsible sections and dynamic data-driven text, to organize information and reduce cognitive load for users.
-   Implement mobile-responsive layouts to ensure reports are accessible across devices.

#### Phase 3: Quality Assurance and Testing

-   Conduct thorough testing for:
    -   **Data Integrity**: Ensure accurate representation of provided data, including handling missing or suppressed data scenarios.
    -   **Functional Testing**: Validate interactive features such as collapsible sections and dynamic charting.
    -   **Visual Testing**: Ensure the design meets DC PCSB’s branding and ADA accessibility standards.
    -   **Mobile Testing**: Verify usability on desktop and mobile devices.

## 3.4 Progressive Disclosure Implementation

Understanding that these reports contain substantial information that can be overwhelming to users, we will implement a progressive disclosure approach to ensure information is presented in digestible layers. This approach allows users to engage with increasing levels of detail based on their interest and needs.

### Our Progressive Disclosure Strategy

1. **Initial View: Metric Overview**
   - Upon selecting a school and framework, users will see a clean, organized list of metrics relevant to the selected framework
   - Each metric will include a concise description explaining its purpose and relevance
   - Clear visual cues will indicate where additional information is available

2. **Level 2: Visualization Layer**
   - Users can expand individual metrics to view graphical representations (primarily bar charts)
   - These visualizations will show measure rates across subgroups
   - The expanded view maintains context by keeping the metric description visible

3. **Level 3: Detailed Scoring Information**
   - For users requiring more detailed information, a third layer will reveal technical elements like measure floors and targets
   - This layer will include scoring context to help interpret the relationship between rates and scores
   - For Type 2 reports, this level will include additional technical details about measure calculation

### Implementation Approach

Our progressive disclosure model will be implemented using:

- **Expandable/Collapsible Sections**: Clean, accessible UI components that clearly indicate expanded/collapsed state
- **Smooth Transitions**: Animations that help users understand the relationship between different information layers
- **Persistent Context**: Ensuring that as users drill down, they maintain orientation within the overall report structure
- **Consistent Interaction Patterns**: Using familiar UI conventions to ensure intuitive navigation

This approach delivers several benefits:

- **Reduced Cognitive Load**: Users aren't overwhelmed with all information at once
- **Improved Comprehension**: Information is consumed in logical, progressive layers
- **Supports Different User Types**: Casual users can access high-level information while technical users can drill down
- **Mobile-Friendly**: Collapsed sections improve usability on smaller screens

See Appendix 5 for a technical implementation example of our progressive disclosure approach.

## 3.5 Ensuring ADA Accessibility Compliance

Our implementation approach prioritizes accessibility from the ground up to ensure all users can effectively engage with the reporting system, regardless of ability. We will meet or exceed WCAG 2.1 AA standards and adhere to all ADA accessibility requirements.

### Text Alternatives and Semantics

- **Alternative Text for Non-Decorative Images**: All informational images, charts, and visualizations will include descriptive alt text that conveys the same information a visual user would receive
- **Semantic HTML Structure**: We'll implement a logical document structure using proper heading levels (H1-H6) that reflect the content hierarchy
- **Text-Based Data**: Where possible, we'll avoid embedding text in images and instead provide data in accessible text formats with appropriate visualization

### Color and Contrast

- **High Contrast Ratios**: All text and interactive elements will maintain a contrast ratio of at least 4.5:1 against their backgrounds
- **Color-Blind Friendly Palettes**: We'll implement a color palette that is accessible to users with various forms of color blindness, focusing on:
  - Using patterns and shapes in addition to color to distinguish data points
  - Avoiding problematic color combinations (red/green, blue/yellow)
  - Testing visualizations with color blindness simulators
- **Dark-on-Light Design**: Our primary design uses dark text on light backgrounds to maximize readability

### Links and Navigation

- **Consistent Link Styling**: All interactive links will follow a consistent visual pattern (color + underline) that clearly differentiates them from regular text
- **Focus Indicators**: Strong visual focus indicators will help keyboard users identify their current position
- **Skip Navigation**: We'll implement skip navigation links for keyboard users

### Motion and Animation

- **Limited Animation**: Any animations will be brief transitional effects rather than continuous movement
- **Respecting User Preferences**: We'll honor the `prefers-reduced-motion` CSS media query to disable animations for users who have indicated this preference

### Technical Implementation

- **ARIA Attributes**: Where necessary, we'll implement ARIA attributes to enhance screen reader compatibility
- **Keyboard Accessibility**: All interactive elements will be fully operable with a keyboard alone
- **Screen Reader Testing**: All components will be tested with popular screen readers (NVDA, JAWS, VoiceOver)

See Appendix 6 for specific code examples demonstrating our technical implementation of these accessibility requirements.

## 3.6 Implementation Approach for Core Requirements

Beyond the functional specifications outlined earlier, we understand that several core implementation requirements are crucial to the success of this project. The following outlines our approach to meeting these essential requirements:

### Mobile-First Design Philosophy

We will implement a true mobile-first design approach for all reports:

- **Responsive Framework**: Using Bootstrap 5's responsive grid system with appropriate breakpoints to ensure graceful adaptation across device sizes
- **Touch-Optimized UI**: Implementing larger touch targets (minimum 44×44px) for all interactive elements on mobile
- **Fluid Typography**: Implementing a responsive typography system that scales appropriately across devices
- **Optimized Data Visualization**: Charts and tables that reconfigure based on screen size:
  - Tables will collapse or scroll horizontally with fixed headers on mobile
  - Charts will simplify or reorient (e.g., bar charts becoming vertical on mobile)
  - Interactive elements will be optimized for touch interfaces

- **Testing Across Devices**: We will test on multiple real devices, not just browser emulators, to ensure proper function and appearance

### Handling Framework and School Variability

Our system architecture is specifically designed to accommodate variability:

- **Dynamically Generated UI**: Report templates adapt to the specific data schema of each framework
- **Conditional Rendering**: Components appear or hide based on data availability
- **Flexible Data Structures**: Our data models can accommodate different metrics, subgroups, and calculation methods
- **Metadata-Driven**: Each framework's unique structure is defined in metadata that controls UI generation
- **Graceful Degradation**: Reports display appropriate messaging when expected data is unavailable

This flexible approach ensures that different frameworks and school-specific variations are handled elegantly without requiring template changes for each variation.

### Progressive Disclosure Implementation

As demonstrated in Appendix 5, our progressive disclosure approach:

- **Minimizes Cognitive Load**: Initial views show only essential information
- **User-Controlled Exploration**: Users can expand sections to see more detail as needed
- **Breadcrumb Navigation**: Helps users maintain context as they explore deeper
- **State Persistence**: User preferences for expanded/collapsed sections can be saved
- **Scalable Navigation**: Adapts to the complexity of each framework without overwhelming users

Our three-tier disclosure model ensures that casual users can quickly grasp essential information while technical users can access the details they need.

### Product Management Approach

We will assign a dedicated Product Manager who will:

- Serve as the primary point of contact for DC PCSB stakeholders
- Translate business requirements into technical specifications
- Coordinate development schedules and resource allocation
- Facilitate demonstrations and feedback sessions
- Manage the product roadmap and prioritize feature development
- Ensure alignment between technical implementation and business goals

Our Product Manager has extensive experience with education data reporting systems and will work closely with DC PCSB stakeholders throughout the project.

### Quality Assurance Process

Our comprehensive QA approach includes:

- **Data Validation Testing**: Verifying the accuracy of all data fetched from the warehouse
- **Functional Testing**: Ensuring all features work as specified across browsers and devices
- **Visual Testing**: Confirming design consistency and proper rendering
- **Accessibility Testing**: Validating WCAG 2.1 AA compliance using both automated tools and manual testing
- **Performance Testing**: Measuring and optimizing load times and interaction responsiveness
- **Regression Testing**: Ensuring new features don't break existing functionality

We maintain automated test suites that run with each code change, supplemented by manual testing before each release.

### Iterative Development and User Testing

We embrace an iterative development process that:

- Delivers working prototypes early for stakeholder feedback
- Conducts regular user testing sessions with representative users
- Implements a rapid feedback-to-implementation cycle
- Provides weekly development updates and demonstrations
- Allows for course correction based on user insights
- Includes multiple review opportunities before major milestones

This approach ensures that stakeholders can validate the implementation at each stage, minimizing the risk of misalignment with expectations.

See Appendix 7 for specific examples of our mobile-optimized implementation approach.

## 4. Phase 4: Delivery and Handover

-   Deliver Type 1 reports first, followed by Type 2 reports.
-   Provide comprehensive documentation, including a detailed README in the GitLab repository, to support DC PCSB’s Data Team in maintaining the product.
-   Conduct user training sessions as needed.

## 5. Phase 5: Iteration and Feedback

-   Present work during DC PCSB’s Sprint Reviews for feedback.
-   Incorporate feedback into iterative updates to ensure the reports meet user expectations.

## 6. Key Features

-   **Responsive Design**: Reports will adapt seamlessly to desktop and mobile devices.
-   **Progressive Disclosure**: Users can expand/collapse sections to view more granular data (e.g., bar charts, measure floors/targets).
-   **Dynamic Text and Charting**: Dynamic data integration into text strings and charts to provide user-specific insights.
-   **ADA Compliance**: Reports will meet all accessibility standards, including color contrast, alternative text, and consistent heading structures.
-   **Maintainability**: Code and documentation will be structured to enable DC PCSB’s Data Team to manage and update reports efficiently.

## 7. Our Team

### 7.1 Product Manager

\[Name\] will serve as the Product Manager for this project. With extensive experience managing similar data reporting projects, \[Name\] will ensure that all deliverables meet DC PCSB’s requirements. Responsibilities include sprint planning, quality assurance, and acting as the primary client liaison.

### 7.2 Development Team

Our development team consists of skilled professionals with expertise in: - **Quarto, Python, and SQL**: For data processing and report generation. - **Front-End Design**: Ensuring mobile responsiveness and ADA compliance. - **GitLab**: Managing version control and collaborative development.

### 7.3 Quality Assurance Specialists

Our QA specialists will rigorously test all reports to ensure data accuracy, functional reliability, and visual consistency.

## 8. Timeline

We propose the following timeline for the project:

| **Phase**            | **Timeline** |
|----------------------|--------------|
| Planning & Design    | Weeks 1-3    |
| Development (Type 1) | Weeks 4-8    |
| Development (Type 2) | Weeks 9-12   |
| Quality Assurance    | Weeks 13-14  |
| Final Delivery       | Week 15      |

This timeline includes iterative feedback and testing during sprint reviews.

## 9. Tools and Technologies

-   **Quarto, Python, and SQL**: For scripting and data integration.
-   **GitLab**: Repository management and documentation.
-   **CSS/YAML**: For branding and styling.
-   **Bootstrap (via Quarto)**: To ensure mobile responsiveness.
-   **Accessibility Tools**: To validate ADA compliance (e.g., color contrast checkers, screen readers).

## 10. Budget

Our proposed budget for this project is **29,400 USD**, covering all phases of development, quality assurance, and documentation. A detailed breakdown can be provided upon request.

Provide a detailed breakdown

## 11. Why Choose Us?

-   **Proven Experience**: We have successfully delivered similar public-facing, data-driven reporting projects.
-   **Focus on Accessibility**: Our team prioritizes ADA compliance to ensure equitable access to all users.
-   **Iterative Development**: We value client feedback and incorporate it into our iterative processes.
-   **Commitment to Quality**: Our robust QA processes ensure a polished, reliable final product.
-   **Maintainability**: We deliver well-documented, maintainable solutions for long-term usability.

## 12. Contact Information

For any questions or further discussion, please contact:

**\[Our Name\]**\
**\[Our Title\]**\
**\[Our Organization\]**\
**\[Email Address\]**\
**\[Phone Number\]**

We look forward to the opportunity to work with DC PCSB and help create impactful, user-friendly ASPIRE reporting tools.

Sincerely,\
**\[Our Name/Team\]**\
**\[Our Organization\]**

## Appendix 1 : Simulated Data Generation and Visualization for ASPIRE Frameworks

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Simulate data for ASPIRE frameworks
def simulate_data():
    # Define frameworks, categories, and measures
    frameworks = ['Framework A', 'Framework B', 'Framework C']
    categories = ['Category 1', 'Category 2', 'Category 3']
    subgroups = ['All Students', 'Subgroup 1', 'Subgroup 2', 'Subgroup 3']
    
    # Create a DataFrame to hold the simulated data
    data = []
    for framework in frameworks:
        for category in categories:
            num_measures = np.random.randint(3, 6)  # Random number of measures per category
            for measure in range(1, num_measures + 1):
                for subgroup in subgroups:
                    rate = np.round(np.random.uniform(50, 100), 1)  # Simulated measure rate
                    data.append([framework, category, f'Measure {measure}', subgroup, rate])
    
    df = pd.DataFrame(data, columns=['Framework', 'Category', 'Measure', 'Subgroup', 'Rate'])
    return df

# Generate the simulated data
df = simulate_data()

# Filter for a single framework and category to visualize
framework_to_plot = 'Framework A'
category_to_plot = 'Category 1'
df_filtered = df[(df['Framework'] == framework_to_plot) & (df['Category'] == category_to_plot)]

# Create a bar chart for subgroup performance in a specific measure
measure_to_plot = 'Measure 1'
df_measure = df_filtered[df_filtered['Measure'] == measure_to_plot]

plt.figure(figsize=(8, 5))
plt.bar(df_measure['Subgroup'], df_measure['Rate'], color='skyblue')
plt.title(f'Subgroup Performance for {measure_to_plot} ({framework_to_plot} - {category_to_plot})')
plt.xlabel('Student Subgroup')
plt.ylabel('Rate (%)')
plt.ylim(0, 100)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Save the visualization
plt.savefig('subgroup_performance.png')
plt.show()

# Output a preview of the simulated data
df_filtered.head()
```

## Appendix 2: Data Integration and Handling Examples

The following examples demonstrate our approach to handling DC PCSB's data requirements, including retrieval from AWS Data Warehouse, working with suppressed data, and implementing dynamic text.

### Example 1: SQL Integration with Quarto for Data Retrieval

```{python}
#| echo: true
#| eval: false

import pyodbc
import pandas as pd
import numpy as np
from typing import Dict, List, Optional

def connect_to_aws_warehouse():
    """
    Establishes connection to DC PCSB's AWS Data Warehouse.
    In production, this would use actual credentials stored securely.
    """
    # Simulation - actual implementation would use environment variables
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=pcsb-aws-warehouse.example.com;'
        'DATABASE=AspireReporting;'
        'UID=reporting_user;'
        'PWD=placeholder_password;'
    )
    return conn

def fetch_framework_data(school_id: str, framework_id: str) -> Dict[str, pd.DataFrame]:
    """
    Retrieves all relevant data for a specific school and framework.
    Returns a dictionary of dataframes with different components.
    """
    conn = connect_to_aws_warehouse()
    
    # Dictionary to store our query results
    result_data = {}
    
    # Fetch framework metadata
    framework_query = f"""
    SELECT * 
    FROM ASPIRE_Frameworks 
    WHERE framework_id = '{framework_id}'
    """
    result_data['framework_meta'] = pd.read_sql(framework_query, conn)
    
    # Fetch categories for this framework
    categories_query = f"""
    SELECT * 
    FROM ASPIRE_Categories 
    WHERE framework_id = '{framework_id}'
    ORDER BY display_order
    """
    result_data['categories'] = pd.read_sql(categories_query, conn)
    
    # Fetch measures for this framework
    measures_query = f"""
    SELECT m.* 
    FROM ASPIRE_Measures m
    JOIN ASPIRE_Categories c ON m.category_id = c.category_id
    WHERE c.framework_id = '{framework_id}'
    ORDER BY c.display_order, m.display_order
    """
    result_data['measures'] = pd.read_sql(measures_query, conn)
    
    # Fetch measure rates for this school and framework
    rates_query = f"""
    SELECT r.*, m.measure_name, m.category_id
    FROM ASPIRE_MeasureRates r
    JOIN ASPIRE_Measures m ON r.measure_id = m.measure_id
    JOIN ASPIRE_Categories c ON m.category_id = c.category_id
    WHERE r.school_id = '{school_id}'
    AND c.framework_id = '{framework_id}'
    """
    result_data['rates'] = pd.read_sql(rates_query, conn)
    
    # For Type 2 reports, fetch floors and targets
    floors_targets_query = f"""
    SELECT ft.*, m.measure_name
    FROM ASPIRE_FloorsTargets ft
    JOIN ASPIRE_Measures m ON ft.measure_id = m.measure_id
    JOIN ASPIRE_Categories c ON m.category_id = c.category_id
    WHERE c.framework_id = '{framework_id}'
    """
    result_data['floors_targets'] = pd.read_sql(floors_targets_query, conn)
    
    # Close connection
    conn.close()
    
    return result_data

# Example usage (not executed)
# school_data = fetch_framework_data('SCH001', 'FW003')
```

### Example 2: Handling Suppressed Data Scenarios

```{python}
#| echo: true
#| eval: false

def process_suppressed_data(df: pd.DataFrame) -> pd.DataFrame:
    """
    Processes a dataframe containing suppressed data codes.
    Replaces suppression codes with appropriate display values.
    
    Suppression codes handled:
    - 'S': Suppressed for privacy (n-size too small)
    - 'DS': Data suppressed by school request
    - 'NA': Not applicable for this measure/subgroup
    - 'NR': Not reported due to data quality concerns
    """
    # Create a copy to avoid modifying the original dataframe
    processed_df = df.copy()
    
    # Replace suppression codes with appropriate display values
    suppression_map = {
        'S': '<span class="suppressed">Suppressed</span>',
        'DS': '<span class="suppressed">Data Suppressed</span>',
        'NA': '<span class="not-applicable">Not Applicable</span>',
        'NR': '<span class="not-reported">Not Reported</span>'
    }
    
    # Apply the mapping to the 'value' column
    if 'value' in processed_df.columns:
        processed_df['display_value'] = processed_df['value'].apply(
            lambda x: suppression_map.get(x, x) if isinstance(x, str) else x
        )
        
        # Add a boolean column to track suppression status
        processed_df['is_suppressed'] = processed_df['value'].apply(
            lambda x: isinstance(x, str) and x in suppression_map
        )
    
    return processed_df

def create_chart_with_suppression_handling(df: pd.DataFrame, measure_name: str) -> str:
    """
    Creates HTML/JS for a chart that properly handles suppressed data.
    Returns HTML string with embedded JavaScript for charting.
    """
    # Filter for the specific measure
    measure_data = df[df['measure_name'] == measure_name].copy()
    
    # Process any suppressed values
    measure_data = process_suppressed_data(measure_data)
    
    # Create datasets for charting - only including non-suppressed numeric data
    numeric_data = measure_data[~measure_data['is_suppressed']].copy()
    
    # Generate HTML/JS for the chart
    chart_html = f"""
    <div class="chart-container" id="chart_{measure_name.replace(' ', '_')}">
        <h4>{measure_name}</h4>
        
        <!-- This section shows if we have valid data to chart -->
        {"" if numeric_data.empty else f'''
        <canvas id="canvas_{measure_name.replace(' ', '_')}"></canvas>
        <script>
        document.addEventListener('DOMContentLoaded', function() {{
            const ctx = document.getElementById('canvas_{measure_name.replace(' ', '_')}').getContext('2d');
            new Chart(ctx, {{
                type: 'bar',
                data: {{
                    labels: {numeric_data['subgroup'].tolist()},
                    datasets: [{{
                        label: '{measure_name}',
                        data: {numeric_data['value'].tolist()},
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgb(54, 162, 235)',
                        borderWidth: 1
                    }}]
                }},
                options: {{
                    scales: {{
                        y: {{
                            beginAtZero: true,
                            max: 100
                        }}
                    }}
                }}
            }});
        }});
        </script>
        '''}
        
        <!-- Table showing all data, including suppressed values -->
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Subgroup</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                {
                    ''.join([
                        f'<tr{"" if not row["is_suppressed"] else " class=\"suppressed-row\""}>'
                        f'<td>{row["subgroup"]}</td>'
                        f'<td>{row["display_value"] if "display_value" in row else row["value"]}</td>'
                        f'</tr>'
                        for _, row in measure_data.iterrows()
                    ])
                }
            </tbody>
        </table>
        
        <!-- Note about suppressed data if any exists -->
        {
            "" if not any(measure_data['is_suppressed']) else 
            '<div class="suppression-note"><small>Note: Some data has been suppressed to protect student privacy.</small></div>'
        }
    </div>
    """
    
    return chart_html
```

### Example 3: Dynamic Text Integration with Data

```{python}
#| echo: true
#| eval: false

def generate_dynamic_text(school_data: Dict[str, pd.DataFrame], template_type: str) -> Dict[str, str]:
    """
    Generates dynamic text strings that incorporate data values.
    Returns a dictionary of text blocks for different report sections.
    
    Parameters:
    - school_data: Dictionary containing all dataframes for a school/framework
    - template_type: 'type1' or 'type2' to determine text content
    """
    text_blocks = {}
    
    # Get basic metadata
    framework_name = school_data['framework_meta']['framework_name'].iloc[0]
    school_name = school_data['rates']['school_name'].iloc[0] if 'school_name' in school_data['rates'].columns else "Selected School"
    
    # Generate introduction text with dynamic data
    text_blocks['introduction'] = f"""
    <p>This report presents {framework_name} outcomes for <strong>{school_name}</strong>. 
    The report contains data across {len(school_data['categories'])} categories and 
    {len(school_data['measures'])} total measures.</p>
    """
    
    # Generate framework overview with performance highlights
    if not school_data['rates'].empty:
        # Calculate overall performance metrics
        all_students_data = school_data['rates'][school_data['rates']['subgroup'] == 'All Students']
        avg_rate = all_students_data['value'].mean() if isinstance(all_students_data['value'].iloc[0], (int, float)) else "N/A"
        
        # Find top performing measure if data is numeric
        if avg_rate != "N/A":
            top_measure_idx = all_students_data['value'].idxmax() if not all_students_data.empty else None
            top_measure_name = all_students_data.loc[top_measure_idx, 'measure_name'] if top_measure_idx is not None else "N/A"
            top_measure_rate = all_students_data.loc[top_measure_idx, 'value'] if top_measure_idx is not None else "N/A"
            
            text_blocks['performance_summary'] = f"""
            <p>Across all measures in this framework, {school_name} has an average performance rate of 
            <strong>{avg_rate:.1f}%</strong> for all students. The highest performing measure is 
            <strong>{top_measure_name}</strong> with a rate of <strong>{top_measure_rate:.1f}%</strong>.</p>
            """
        else:
            text_blocks['performance_summary'] = f"""
            <p>Complete performance metrics for {school_name} are not available due to data suppression rules.</p>
            """
    else:
        text_blocks['performance_summary'] = f"""
        <p>No performance data is currently available for {school_name} in this framework.</p>
        """
    
    # Add Type 2 specific text if needed
    if template_type == 'type2' and 'floors_targets' in school_data:
        # Get floor and target context
        floors_targets = school_data['floors_targets']
        avg_floor = floors_targets['floor'].mean() if 'floor' in floors_targets.columns else "N/A"
        avg_target = floors_targets['target'].mean() if 'target' in floors_targets.columns else "N/A"
        
        text_blocks['targets_context'] = f"""
        <p>For this framework, measures have an average floor of <strong>{avg_floor:.1f}%</strong> 
        and an average target of <strong>{avg_target:.1f}%</strong>. Schools receive points based on 
        where their performance falls between these values.</p>
        """
    
    return text_blocks
```

### Appendix 4: Report Navigation and Structure Implementation

```{python}
#| echo: true
#| eval: false

def generate_school_framework_selector(school_id: Optional[str] = None) -> str:
    """
    Generates an interactive selector for schools and their available frameworks.
    If a school_id is provided, pre-selects that school in the dropdown.
    """
    conn = connect_to_aws_warehouse()
    
    # Get list of all schools
    schools_query = """
    SELECT school_id, school_name 
    FROM ASPIRE_Schools
    ORDER BY school_name
    """
    schools = pd.read_sql(schools_query, conn)
    
    # Get mapping of school to frameworks
    frameworks_query = """
    SELECT sf.school_id, s.school_name, sf.framework_id, f.framework_name
    FROM ASPIRE_SchoolFrameworks sf
    JOIN ASPIRE_Schools s ON sf.school_id = s.school_id
    JOIN ASPIRE_Frameworks f ON sf.framework_id = f.framework_id
    ORDER BY s.school_name, f.framework_name
    """
    school_frameworks = pd.read_sql(frameworks_query, conn)
    
    conn.close()
    
    # Convert to a structured format for JS
    schools_list = schools.to_dict('records')
    
    # Create a nested dictionary of school -> frameworks
    frameworks_by_school = {}
    for _, row in school_frameworks.iterrows():
        school_id = row['school_id']
        if school_id not in frameworks_by_school:
            frameworks_by_school[school_id] = []
        
        frameworks_by_school[school_id].append({
            'framework_id': row['framework_id'],
            'framework_name': row['framework_name']
        })
    
    # Create HTML/JS for the selector
    html_output = """
    <div class="selector-container mb-4">
        <div class="row">
            <div class="col-md-6">
                <label for="school-select" class="form-label">Select a School:</label>
                <select class="form-select" id="school-select">
                    <option value="">-- Select a School --</option>
    """
    
    # Add school options
    for school in schools_list:
        selected = "selected" if school['school_id'] == school_id else ""
        html_output += f'<option value="{school["school_id"]}" {selected}>{school["school_name"]}</option>\n'
    
    html_output += """
                </select>
            </div>
            <div class="col-md-6">
                <label for="framework-select" class="form-label">Select a Framework:</label>
                <select class="form-select" id="framework-select" disabled>
                    <option value="">-- Select a Framework --</option>
                </select>
            </div>
        </div>
        
        <div class="mt-3">
            <button id="view-report-btn" class="btn btn-primary" disabled>View Report</button>
        </div>
    </div>
    
    <script>
    // Store the framework data for all schools
    const frameworksBySchool = JSON.parse('""" + json.dumps(frameworks_by_school) + """');
    
    // Function to update available frameworks when a school is selected
    document.getElementById('school-select').addEventListener('change', function() {
        const schoolId = this.value;
        const frameworkSelect = document.getElementById('framework-select');
        
        // Clear current options
        frameworkSelect.innerHTML = '<option value="">-- Select a Framework --</option>';
        
        if (schoolId && frameworksBySchool[schoolId]) {
            // Add frameworks for this school
            frameworksBySchool[schoolId].forEach(framework => {
                const option = document.createElement('option');
                option.value = framework.framework_id;
                option.textContent = framework.framework_name;
                frameworkSelect.appendChild(option);
            });
            
            // Enable the framework select
            frameworkSelect.disabled = false;
        } else {
            frameworkSelect.disabled = true;
        }
        
        // Disable the view button until a framework is selected
        document.getElementById('view-report-btn').disabled = true;
    });
    
    // Enable view button when both selections are made
    document.getElementById('framework-select').addEventListener('change', function() {
        document.getElementById('view-report-btn').disabled = !this.value;
    });
    
    // Handle the view report button
    document.getElementById('view-report-btn').addEventListener('click', function() {
        const schoolId = document.getElementById('school-select').value;
        const frameworkId = document.getElementById('framework-select').value;
        
        if (schoolId && frameworkId) {
            // Navigate to the report page with these parameters
            window.location.href = `report.html?school=${schoolId}&framework=${frameworkId}`;
        }
    });
    
    // Initialize frameworks if a school is already selected
    if (document.getElementById('school-select').value) {
        document.getElementById('school-select').dispatchEvent(new Event('change'));
    }
    </script>
    """
    
    return html_output

def generate_report_navigation(categories: pd.DataFrame) -> str:
    """
    Generates a sticky navigation bar for report categories.
    """
    nav_html = """
    <nav class="sticky-top report-nav bg-light p-2 mb-3">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <ul class="nav nav-pills nav-fill small">
    """
    
    # Add navigation items for each category
    for _, category in categories.iterrows():
        category_id = category['category_id']
        category_name = category['category_name']
        
        nav_html += f"""
        <li class="nav-item">
            <a class="nav-link" href="#category_{category_id}">{category_name}</a>
        </li>
        """
    
    nav_html += """
                    </ul>
                </div>
            </div>
        </div>
    </nav>
    
    <script>
    // Activate the appropriate nav item based on scroll position
    document.addEventListener('DOMContentLoaded', function() {
        const navLinks = document.querySelectorAll('.report-nav .nav-link');
        const sections = document.querySelectorAll('.category-section');
        
        function highlightNavOnScroll() {
            const scrollPosition = window.scrollY + 100; // Offset for navbar
            
            // Find the current section
            let currentSection = null;
            sections.forEach(section => {
                if (section.offsetTop <= scrollPosition && 
                    (section.offsetTop + section.offsetHeight) > scrollPosition) {
                    currentSection = section.id;
                }
            });
            
            // Update active nav item
            navLinks.forEach(link => {
                if (link.getAttribute('href') === '#' + currentSection) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }
        
        // Listen for scroll events
        window.addEventListener('scroll', highlightNavOnScroll);
        
        // Initial check
        highlightNavOnScroll();
    });
    </script>
    """
    
    return nav_html
```

```{python}
#| echo: true
#| eval: false

# Helper functions for different visualization types
def create_bar_chart(data: pd.DataFrame, title: str) -> str:
    """Creates a bar chart visualization for subgroup data"""
    # Only include non-suppressed data in the chart
    chart_data = data[~data['is_suppressed']]
    
    chart_html = f"""
    <div class="chart-container">
        <canvas id="chart_{title.replace(' ', '_')}"></canvas>
        <script>
        document.addEventListener('DOMContentLoaded', function() {{
            const ctx = document.getElementById('chart_{title.replace(' ', '_')}').getContext('2d');
            new Chart(ctx, {{
                type: 'bar',
                data: {{
                    labels: {chart_data['subgroup_name'].tolist()},
                    datasets: [{{
                        label: '{title}',
                        data: {chart_data['value'].tolist()},
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1
                    }}]
                }},
                options: {{
                    responsive: true,
                    scales: {{
                        y: {{
                            beginAtZero: true,
                            title: {{
                                display: true,
                                text: 'Rate (%)'
                            }}
                        }}
                    }}
                }}
            }});
        }});
        </script>
        
        <!-- Table with all data including suppressed values -->
        <table class="table table-sm mt-3">
            <thead>
                <tr>
                    <th>Subgroup</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                {
                    ''.join([
                        f'<tr{"" if not row["is_suppressed"] else " class=\"suppressed-row\""}>'
                        f'<td>{row["subgroup_name"]}</td>'
                        f'<td>{row["display_value"]}</td>'
                        f'</tr>'
                        for _, row in data.iterrows()
                    ])
                }
            </tbody>
        </table>
    </div>
    """
    
    return chart_html
```

## Appendix 5: Progressive Disclosure Implementation Example

The following code demonstrates our approach to implementing progressive disclosure in the reporting interface:

```{python}
#| echo: true
#| eval: true
#| output: asis

import pandas as pd
import json
import random
from IPython.display import HTML

# Create simulated data
def create_simulated_data():
    """Generate simulated data for demonstration purposes"""
    # Framework metadata
    framework_meta = pd.DataFrame([{
        'framework_id': 'FW001',
        'framework_name': 'Academic Achievement Framework'
    }])
    
    # Categories
    categories = pd.DataFrame([
        {'category_id': 'CAT001', 'framework_id': 'FW001', 'category_name': 'Literacy', 
         'description': 'Measures of student literacy achievement', 'display_order': 1},
        {'category_id': 'CAT002', 'framework_id': 'FW001', 'category_name': 'Mathematics', 
         'description': 'Measures of student mathematics achievement', 'display_order': 2}
    ])
    
    # Measures
    measures = pd.DataFrame([
        {'measure_id': 'M001', 'category_id': 'CAT001', 'measure_name': 'Reading Proficiency', 
         'description': 'Percentage of students scoring proficient or above on reading assessments', 'display_order': 1},
        {'measure_id': 'M002', 'category_id': 'CAT001', 'measure_name': 'Writing Proficiency', 
         'description': 'Percentage of students scoring proficient or above on writing assessments', 'display_order': 2},
        {'measure_id': 'M003', 'category_id': 'CAT002', 'measure_name': 'Math Proficiency', 
         'description': 'Percentage of students scoring proficient or above on mathematics assessments', 'display_order': 1}
    ])
    
    # Define subgroups
    subgroups = ['All Students', 'Economically Disadvantaged', 'Students with Disabilities', 'English Learners']
    
    # Generate rates data
    rates_data = []
    
    for measure_id, category_id in zip(['M001', 'M002', 'M003'], ['CAT001', 'CAT001', 'CAT002']):
        for subgroup in subgroups:
            # Randomly determine if this should be a suppressed value
            if subgroup == 'Students with Disabilities' and random.random() < 0.7:
                value = 'S'  # Suppressed
            elif subgroup == 'English Learners' and measure_id == 'M002':
                value = 'NA'  # Not applicable
            else:
                # Generate random performance value between 50-90%
                value = round(random.uniform(50, 90), 1)
            
            rates_data.append({
                'school_id': 'SCH001', 
                'school_name': 'Example Charter School', 
                'measure_id': measure_id, 
                'category_id': category_id, 
                'subgroup': subgroup, 
                'value': value
            })
    
    rates = pd.DataFrame(rates_data)
    
    # Generate floors and targets
    floors_targets = pd.DataFrame([
        {'measure_id': 'M001', 'floor': 50.0, 'target': 90.0},
        {'measure_id': 'M002', 'floor': 45.0, 'target': 85.0},
        {'measure_id': 'M003', 'floor': 55.0, 'target': 95.0}
    ])
    
    return {
        'framework_meta': framework_meta,
        'categories': categories,
        'measures': measures,
        'rates': rates,
        'floors_targets': floors_targets
    }

# Process suppressed data
def process_suppressed_data(df):
    """Process suppressed data codes for display"""
    processed_df = df.copy()
    
    # Define display values for suppression codes
    suppression_map = {
        'S': '<span class="suppressed">Suppressed</span>',
        'DS': '<span class="suppressed">Data Suppressed</span>',
        'NA': '<span class="not-applicable">Not Applicable</span>',
        'NR': '<span class="not-reported">Not Reported</span>'
    }
    
    # Add display value and suppression flag columns
    if 'value' in processed_df.columns:
        processed_df['display_value'] = processed_df['value'].apply(
            lambda x: suppression_map.get(x, str(x) + '%') if isinstance(x, str) else f"{x}%"
        )
        processed_df['is_suppressed'] = processed_df['value'].apply(
            lambda x: isinstance(x, str) and x in suppression_map
        )
    
    return processed_df

# Create the demonstration HTML
def create_progressive_disclosure_demo():
    """Create interactive HTML demo of progressive disclosure implementation"""
    # Get simulated data
    school_data = create_simulated_data()
    
    # Process the rates data
    processed_rates = process_suppressed_data(school_data['rates'])
    
    # Start building the HTML
    html = """
    <div class="demo-container">
        <h3>Progressive Disclosure Implementation Demo</h3>
        <p>This interactive demonstration shows our approach to progressive disclosure. 
        Explore by clicking the buttons to reveal additional layers of information.</p>
        
        <div class="pd-report">
    """
    
    # Create a section for each category
    for _, category in school_data['categories'].iterrows():
        category_id = category['category_id']
        category_name = category['category_name']
        category_description = category['description']
        
        html += f"""
        <div class="pd-category" id="category_{category_id}">
            <div class="pd-category-header">
                <h4>{category_name}</h4>
            </div>
            <div class="pd-category-description">{category_description}</div>
            <div class="pd-measures-container">
        """
        
        # Get measures for this category
        category_measures = school_data['measures'][school_data['measures']['category_id'] == category_id]
        
        # For each measure, create a progressive disclosure component
        for _, measure in category_measures.iterrows():
            measure_id = measure['measure_id']
            measure_name = measure['measure_name']
            measure_description = measure['description']
            
            # Get data for this measure
            measure_data = processed_rates[
                (processed_rates['category_id'] == category_id) & 
                (processed_rates['measure_id'] == measure_id)
            ]
            
            # Get floors and targets for this measure
            ft_data = school_data['floors_targets'][school_data['floors_targets']['measure_id'] == measure_id]
            if not ft_data.empty:
                floor = ft_data['floor'].iloc[0]
                target = ft_data['target'].iloc[0]
            else:
                floor = None
                target = None
            
            # Create measure HTML
            html += f"""
            <div class="pd-measure" id="measure_{measure_id}">
                <!-- Level 1: Always visible -->
                <div class="pd-level pd-level-1">
                    <div class="pd-measure-header">
                        <span class="pd-measure-name">{measure_name}</span>
                        <button class="pd-toggle" onclick="toggleLevel2('{measure_id}')">
                            <span id="toggle1_{measure_id}_text">Show Data</span>
                            <span class="pd-toggle-icon">▼</span>
                        </button>
                    </div>
                    <div class="pd-measure-description">{measure_description}</div>
                </div>
                
                <!-- Level 2: Visualization (hidden initially) -->
                <div class="pd-level pd-level-2" id="level2_{measure_id}" style="display:none;">
                    <div class="pd-chart-container">
                        <!-- Show table with data -->
                        <table class="pd-data-table">
                            <thead>
                                <tr>
                                    <th>Subgroup</th>
                                    <th>Rate</th>
                                </tr>
                            </thead>
                            <tbody>
            """
            
            # Add table rows
            for _, row in measure_data.iterrows():
                suppressed = "pd-suppressed" if row['is_suppressed'] else ""
                html += f"""
                <tr class="{suppressed}">
                    <td>{row['subgroup']}</td>
                    <td>{row['display_value']}</td>
                </tr>
                """
            
            html += """
                            </tbody>
                        </table>
                    </div>
            """
            
            # Add Level 3 toggle and content if we have floors/targets
            if floor is not None and target is not None:
                html += f"""
                    <div class="pd-level-3-container">
                        <button class="pd-toggle pd-toggle-l3" onclick="toggleLevel3('{measure_id}')">
                            <span id="toggle2_{measure_id}_text">Show Scoring Details</span>
                            <span class="pd-toggle-icon">▼</span>
                        </button>
                        
                        <!-- Level 3: Technical details (hidden initially) -->
                        <div class="pd-level pd-level-3" id="level3_{measure_id}" style="display:none;">
                            <div class="pd-scoring-details">
                                <h5>Scoring Information</h5>
                                <div class="pd-scoring-grid">
                                    <div class="pd-scoring-item">
                                        <span class="pd-label">Floor:</span>
                                        <span class="pd-value">{floor}%</span>
                                    </div>
                                    <div class="pd-scoring-item">
                                        <span class="pd-label">Target:</span>
                                        <span class="pd-value">{target}%</span>
                                    </div>
                                </div>
                                <p class="pd-scoring-explanation">
                                    Schools receive 0 points at the floor value ({floor}%) 
                                    and 100 points at the target ({target}%). 
                                    Scores are calculated proportionally between these values.
                                </p>
                            </div>
                        </div>
                    </div>
                """
            
            html += """
                </div><!-- End of Level 2 -->
            </div><!-- End of measure -->
            """
        
        html += """
            </div><!-- End of measures container -->
        </div><!-- End of category -->
        """
    
    # Add JavaScript for interactions
    html += """
        </div><!-- End of report -->
        
        <script>
        function toggleLevel2(measureId) {
            const content = document.getElementById('level2_' + measureId);
            const toggleText = document.getElementById('toggle1_' + measureId + '_text');
            const toggleBtn = toggleText.parentElement;
            
            if (content.style.display === 'none') {
                content.style.display = 'block';
                toggleText.innerText = 'Hide Data';
                toggleBtn.classList.add('pd-toggle-active');
            } else {
                content.style.display = 'none';
                toggleText.innerText = 'Show Data';
                toggleBtn.classList.remove('pd-toggle-active');
                
                // Also hide level 3 if it's visible
                const level3 = document.getElementById('level3_' + measureId);
                if (level3 && level3.style.display !== 'none') {
                    toggleLevel3(measureId); // Toggle it off
                }
            }
        }
        
        function toggleLevel3(measureId) {
            const content = document.getElementById('level3_' + measureId);
            const toggleText = document.getElementById('toggle2_' + measureId + '_text');
            const toggleBtn = toggleText.parentElement;
            
            if (content.style.display === 'none') {
                content.style.display = 'block';
                toggleText.innerText = 'Hide Scoring Details';
                toggleBtn.classList.add('pd-toggle-active');
            } else {
                content.style.display = 'none';
                toggleText.innerText = 'Show Scoring Details';
                toggleBtn.classList.remove('pd-toggle-active');
            }
        }
        </script>
        
        <style>
        .demo-container {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 900px;
            margin: 0 auto;
        }
        
        .pd-report {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .pd-category {
            margin-bottom: 2rem;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 1rem;
        }
        
        .pd-category-header {
            background-color: #f0f7ff;
            padding: 1rem;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .pd-category-header h4 {
            margin: 0;
            color: #2c3e50;
        }
        
        .pd-category-description {
            padding: 0.5rem 1rem;
            color: #5a6a7e;
            font-size: 0.9rem;
        }
        
        .pd-measures-container {
            padding: 0.5rem 1rem;
        }
        
        .pd-measure {
            margin-bottom: 1.5rem;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }
        
        .pd-level-1 {
            background-color: #ffffff;
        }
        
        .pd-measure-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            background-color: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .pd-measure-name {
            font-weight: bold;
            color: #2c3e50;
        }
        
        .pd-measure-description {
            padding: 0.75rem 1rem;
            font-size: 0.9rem;
            color: #5a6a7e;
        }
        
        .pd-toggle {
            background-color: #4b6cb7;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 0.4rem 0.75rem;
            font-size: 0.8rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background-color 0.2s;
        }
        
        .pd-toggle:hover {
            background-color: #3a5a9b;
        }
        
        .pd-toggle-active {
            background-color: #34495e;
        }
        
        .pd-toggle-icon {
            margin-left: 0.5rem;
            font-size: 0.7rem;
        }
        
        .pd-level-2, .pd-level-3 {
            padding: 1rem;
            background-color: #f8f9fa;
            border-top: 1px solid #e0e0e0;
        }
        
        .pd-chart-container {
            width: 100%;
            overflow-x: auto;
        }
        
        .pd-data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
        }
        
        .pd-data-table th {
            background-color: #e9ecef;
            padding: 0.5rem;
            text-align: left;
            border: 1px solid #dee2e6;
        }
        
        .pd-data-table td {
            padding: 0.5rem;
            border: 1px solid #dee2e6;
        }
        
        .pd-suppressed {
            background-color: #f8f9fa;
            color: #6c757d;
            font-style: italic;
        }
        
        .suppressed {
            color: #dc3545;
            font-style: italic;
        }
        
        .not-applicable {
            color: #6c757d;
            font-style: italic;
        }
        
        .pd-toggle-l3 {
            margin: 1rem 0;
            background-color: #6c757d;
        }
        
        .pd-toggle-l3:hover {
            background-color: #5a6268;
        }
        
        .pd-level-3-container {
            margin-top: 1rem;
            border-top: 1px dashed #dee2e6;
            padding-top: 0.5rem;
        }
        
        .pd-scoring-details {
            background-color: #e9f7fe;
            border-radius: 4px;
            padding: 1rem;
            font-size: 0.9rem;
        }
        
        .pd-scoring-details h5 {
            margin-top: 0;
            color: #2c3e50;
        }
        
        .pd-scoring-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin: 1rem 0;
        }
        
        .pd-scoring-item {
            display: flex;
            flex-direction: column;
        }
        
        .pd-label {
            font-weight: bold;
            color: #495057;
            font-size: 0.8rem;
        }
        
        .pd-value {
            font-size: 1.5rem;
            color: #0078D7;
            font-weight: bold;
        }
        
        .pd-scoring-explanation {
            color: #6c757d;
            font-size: 0.8rem;
            margin-top: 0.5rem;
        }
        
        @media (max-width: 768px) {
            .pd-scoring-grid {
                grid-template-columns: 1fr;
            }
        }
        </style>
    </div>
    """
    
    return html

# Generate the interactive demo
demo_html = create_progressive_disclosure_demo()
HTML(demo_html)
```

## Appendix 6: Accessibility Implementation Examples

The following examples demonstrate our approach to implementing WCAG 2.1 AA compliant, accessible components for the ASPIRE reporting system:

```{python}
#| echo: true
#| eval: true
#| output: asis

import pandas as pd
import numpy as np
import json
from IPython.display import HTML

def create_accessible_examples():
    """Create examples of accessible implementations for various report components"""
    
    html = """
    <div class="a11y-examples">
        <h3>Accessibility Implementation Examples</h3>
        <p>The following examples demonstrate our approach to creating accessible report components that comply with WCAG 2.1 AA standards.</p>
        
        <div class="a11y-example" id="accessible-charts">
            <h4>1. Accessible Data Visualization</h4>
            
            <div class="example-container">
                <p>Our data visualizations include multiple accessibility features:</p>
                
                <div class="chart-example">
                    <div class="chart-title">
                        <h5>Reading Proficiency by Subgroup</h5>
                    </div>
                    
                    <div class="example-chart">
                        <div class="chart-bars">
                            <div class="chart-bar" style="height: 75%;" aria-hidden="true">
                                <span class="bar-label">All</span>
                                <span class="bar-value">75%</span>
                            </div>
                            <div class="chart-bar" style="height: 68%;" aria-hidden="true">
                                <span class="bar-label">Econ. Dis.</span>
                                <span class="bar-value">68%</span>
                            </div>
                            <div class="chart-bar suppressed-bar" style="height: 30%;" aria-hidden="true">
                                <span class="bar-label">SWD</span>
                                <span class="bar-value">S</span>
                            </div>
                            <div class="chart-bar" style="height: 61%;" aria-hidden="true">
                                <span class="bar-label">EL</span>
                                <span class="bar-value">61%</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Accessible alternatives -->
                    <div class="sr-only">This chart shows Reading Proficiency rates by subgroup.</div>
                    <table class="a11y-table" aria-label="Reading Proficiency Data">
                        <caption>Reading Proficiency by Subgroup</caption>
                        <thead>
                            <tr>
                                <th scope="col">Subgroup</th>
                                <th scope="col">Rate</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">All Students</th>
                                <td>75%</td>
                            </tr>
                            <tr>
                                <th scope="row">Economically Disadvantaged</th>
                                <td>68%</td>
                            </tr>
                            <tr>
                                <th scope="row">Students with Disabilities</th>
                                <td>Suppressed</td>
                            </tr>
                            <tr>
                                <th scope="row">English Learners</th>
                                <td>61%</td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <div class="a11y-notes">
                        <h6>Accessibility Features</h6>
                        <ul>
                            <li>Data presented in accessible HTML table with proper headers</li>
                            <li>Chart elements have appropriate ARIA attributes</li>
                            <li>Visual elements use patterns in addition to color</li>
                            <li>High contrast colors meet 4.5:1 ratio requirements</li>
                            <li>Color-blind friendly palette (tested with simulators)</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="a11y-example" id="semantic-structure">
            <h4>2. Semantic Document Structure</h4>
            
            <div class="example-container">
                <p>Our reports use proper semantic HTML structure for optimal screen reader compatibility:</p>
                
                <div class="code-example">
<pre><code>&lt;!-- Example of proper heading hierarchy --&gt;
&lt;main&gt;
  &lt;h1&gt;ASPIRE Report: Washington Academy&lt;/h1&gt;
  
  &lt;section aria-labelledby="overview-heading"&gt;
    &lt;h2 id="overview-heading"&gt;Academic Framework Overview&lt;/h2&gt;
    &lt;p&gt;Overall framework information...&lt;/p&gt;
  &lt;/section&gt;
  
  &lt;section aria-labelledby="category-heading"&gt;
    &lt;h2 id="category-heading"&gt;Literacy&lt;/h2&gt;
    &lt;p&gt;Category description...&lt;/p&gt;
    
    &lt;article aria-labelledby="measure-heading"&gt;
      &lt;h3 id="measure-heading"&gt;Reading Proficiency&lt;/h3&gt;
      &lt;p&gt;Measure description...&lt;/p&gt;
      
      &lt;!-- Chart with accessible table alternative --&gt;
    &lt;/article&gt;
  &lt;/section&gt;
&lt;/main&gt;</code></pre>
                </div>
                
                <div class="a11y-notes">
                    <h6>Accessibility Features</h6>
                    <ul>
                        <li>Logical heading structure reflecting document hierarchy</li>
                        <li>Semantic HTML5 elements (main, section, article)</li>
                        <li>ARIA landmarks and labels for enhanced screen reader navigation</li>
                        <li>Properly associated elements with id/aria-labelledby</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="a11y-example" id="keyboard-navigation">
            <h4>3. Keyboard Accessibility for Progressive Disclosure</h4>
            
            <div class="example-container">
                <p>Our expandable content sections are fully keyboard accessible:</p>
                
                <div class="keyboard-example">
                    <div class="expandable-section">
                        <div class="expandable-header">
                            <h5 id="section-heading">Math Proficiency</h5>
                            <button aria-expanded="false" aria-controls="section-content" class="expand-button" 
                                    onclick="toggleSection(this)">
                                <span class="expand-text">Show Data</span>
                                <span class="collapse-text">Hide Data</span>
                                <span class="visually-hidden"> for Math Proficiency</span>
                            </button>
                        </div>
                        
                        <div id="section-content" class="expandable-content" hidden>
                            <p>This content becomes visible when expanded. It is fully accessible to keyboard and screen reader users.</p>
                            
                            <table class="a11y-table" aria-label="Math Proficiency Data">
                                <caption>Math Proficiency by Subgroup</caption>
                                <thead>
                                    <tr>
                                        <th scope="col">Subgroup</th>
                                        <th scope="col">Rate</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th scope="row">All Students</th>
                                        <td>82%</td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Economically Disadvantaged</th>
                                        <td>76%</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <div class="a11y-notes">
                        <h6>Accessibility Features</h6>
                        <ul>
                            <li>Keyboard operable buttons (can be activated with Enter or Space)</li>
                            <li>Proper ARIA attributes (aria-expanded, aria-controls)</li>
                            <li>Screen reader accessible labels and descriptions</li>
                            <li>Visible focus indicators for keyboard navigation</li>
                            <li>No keyboard traps within expanded content</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="a11y-example" id="color-contrast">
            <h4>4. Color Contrast and Color-Blind Friendly Design</h4>
            
            <div class="example-container">
                <p>Our color choices prioritize accessibility for all users:</p>
                
                <div class="color-example">
                    <div class="color-palette">
                        <div class="color-swatch">
                            <div class="swatch" style="background-color: #2a4d69; color: #ffffff;">
                                <span>Primary</span><br>#2a4d69
                            </div>
                            <div class="contrast-ratio">Contrast with white: 8.5:1</div>
                        </div>
                        
                        <div class="color-swatch">
                            <div class="swatch" style="background-color: #4b86b4; color: #ffffff;">
                                <span>Secondary</span><br>#4b86b4
                            </div>
                            <div class="contrast-ratio">Contrast with white: 4.7:1</div>
                        </div>
                        
                        <div class="color-swatch">
                            <div class="swatch" style="background-color: #adcbe3; color: #000000;">
                                <span>Accent</span><br>#adcbe3
                            </div>
                            <div class="contrast-ratio">Contrast with black: 13.4:1</div>
                        </div>
                        
                        <div class="color-swatch">
                            <div class="swatch" style="background-color: #e7eff6; color: #000000;">
                                <span>Background</span><br>#e7eff6
                            </div>
                            <div class="contrast-ratio">Contrast with black: 17.8:1</div>
                        </div>
                    </div>
                    
                    <div class="a11y-notes">
                        <h6>Accessibility Features</h6>
                        <ul>
                            <li>All text has contrast ratio of at least 4.5:1 (exceeds WCAG AA)</li>
                            <li>Color palette tested with protanopia, deuteranopia, and tritanopia simulators</li>
                            <li>Avoids problematic color combinations (red/green, blue/yellow)</li>
                            <li>Uses patterns and shapes in addition to color for data visualization</li>
                            <li>Dark text on light backgrounds for optimal readability</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
    function toggleSection(button) {
        // Get the expanded state and convert from string to boolean
        const expanded = button.getAttribute('aria-expanded') === 'true';
        
        // Get the content element that this button controls
        const contentId = button.getAttribute('aria-controls');
        const content = document.getElementById(contentId);
        
        if (expanded) {
            // Currently expanded, so collapse
            button.setAttribute('aria-expanded', 'false');
            content.hidden = true;
            button.classList.remove('expanded');
        } else {
            // Currently collapsed, so expand
            button.setAttribute('aria-expanded', 'true');
            content.hidden = false;
            button.classList.add('expanded');
        }
    }
    </script>
    
    <style>
    .a11y-examples {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 900px;
        margin: 0 auto;
        color: #333;
    }
    
    .a11y-example {
        margin-bottom: 2.5rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .a11y-example h4 {
        margin: 0;
        padding: 1rem;
        background-color: #2a4d69;
        color: white;
    }
    
    .example-container {
        padding: 1rem;
    }
    
    /* Chart Example */
    .chart-example {
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .chart-title {
        margin-bottom: 1rem;
    }
    
    .example-chart {
        height: 250px;
        margin: 1rem 0;
        position: relative;
    }
    
    .chart-bars {
        display: flex;
        justify-content: space-around;
        align-items: flex-end;
        height: 200px;
        width: 100%;
        border-bottom: 2px solid #ccc;
    }
    
    .chart-bar {
        width: 60px;
        background-color: #4b86b4;
        border: 1px solid #2a4d69;
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        border-radius: 4px 4px 0 0;
    }
    
    .suppressed-bar {
        background: repeating-linear-gradient(
            45deg,
            #4b86b4,
            #4b86b4 10px,
            #adcbe3 10px,
            #adcbe3 20px
        );
    }
    
    .bar-value {
        position: absolute;
        top: -25px;
        color: #333;
        font-weight: bold;
    }
    
    .bar-label {
        position: absolute;
        bottom: -25px;
        color: #333;
        font-size: 0.8rem;
    }
    
    /* Accessible Tables */
    .a11y-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
    }
    
    .a11y-table caption {
        font-weight: bold;
        text-align: left;
        margin-bottom: 0.5rem;
        color: #2a4d69;
    }
    
    .a11y-table th, .a11y-table td {
        padding: 0.75rem;
        border: 1px solid #dee2e6;
        text-align: left;
    }
    
    .a11y-table th {
        background-color: #e7eff6;
    }
    
    /* Code Example */
    .code-example {
        background-color: #f8f9fa;
        border-radius: 4px;
        padding: 1rem;
        margin: 1rem 0;
        overflow-x: auto;
    }
    
    .code-example pre {
        margin: 0;
    }
    
    .code-example code {
        font-family: Consolas, Monaco, 'Andale Mono', monospace;
        font-size: 0.9rem;
        color: #333;
    }
    
    /* Keyboard Navigation Example */
    .keyboard-example {
        margin: 1rem 0;
    }
    
    .expandable-section {
        border: 1px solid #dee2e6;
        border-radius: 4px;
        margin-bottom: 1rem;
    }
    
    .expandable-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: #e7eff6;
    }
    
    .expandable-header h5 {
        margin: 0;
    }
    
    .expand-button {
        background-color: #4b86b4;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        font-size: 0.9rem;
    }
    
    .expand-button:hover, .expand-button:focus {
        background-color: #2a4d69;
        outline: 3px solid #adcbe3;
    }
    
    .expand-button .collapse-text {
        display: none;
    }
    
    .expand-button.expanded .expand-text {
        display: none;
    }
    
    .expand-button.expanded .collapse-text {
        display: inline;
    }
    
    .expandable-content {
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }
    
    /* Color Example */
    .color-palette {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }
    
    .color-swatch {
        display: flex;
        flex-direction: column;
    }
    
    .swatch {
        height: 100px;
        border-radius: 4px;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
    }
    
    .contrast-ratio {
        margin-top: 0.5rem;
        font-size: 0.8rem;
        color: #666;
    }
    
    /* Accessibility Notes */
    .a11y-notes {
        background-color: #f8f9fa;
        border-left: 4px solid #4b86b4;
        padding: 1rem;
        margin-top: 1.5rem;
    }
    
    .a11y-notes h6 {
        margin-top: 0;
        color: #2a4d69;
    }
    
    .a11y-notes ul {
        padding-left: 1.5rem;
        margin-bottom: 0;
    }
    
    /* Utility Classes */
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }
    
    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }
    </style>
    """
    
    return html

# Generate the accessible examples
a11y_examples = create_accessible_examples()
HTML(a11y_examples)
```

## Appendix 7: Mobile-Optimized Implementation Examples

```{python}
#| echo: true
#| eval: true
#| output: asis

from IPython.display import HTML

def create_mobile_optimization_demo():
    """Create examples demonstrating our mobile-first approach"""
    
    html = """
    <div class="mobile-examples">
        <h3>Mobile-Optimized Implementation Examples</h3>
        <p>The following examples demonstrate our approach to ensuring reports are fully functional and visually optimized across all device sizes.</p>
        
        <div class="device-switcher">
            <button class="device-btn active" onclick="switchView('desktop')">Desktop View</button>
            <button class="device-btn" onclick="switchView('tablet')">Tablet View</button>
            <button class="device-btn" onclick="switchView('mobile')">Mobile View</button>
        </div>
        
        <div class="example-section">
            <h4>1. Responsive Layout Adaptation</h4>
            
            <div class="device-container" id="device-view">
                <div class="device desktop-view">
                    <div class="responsive-example">
                        <div class="report-header">
                            <h2>Example Charter School: Academic Framework</h2>
                            <div class="school-meta">
                                <span class="school-year">2023-2024</span>
                                <span class="school-tier">Tier 1</span>
                            </div>
                            <p class="report-description">This report presents achievement outcomes for Example Charter School across multiple academic measures.</p>
                        </div>
                        
                        <div class="category-navigation">
                            <ul>
                                <li><a href="#" class="active">Literacy</a></li>
                                <li><a href="#">Mathematics</a></li>
                                <li><a href="#">College Readiness</a></li>
                                <li><a href="#">School Environment</a></li>
                            </ul>
                        </div>
                        
                        <div class="multi-metrics-container">
                            <div class="metric-card">
                                <h5>Reading Proficiency</h5>
                                <div class="metric-value">76%</div>
                                <div class="metric-description">Percentage of students scoring proficient or above in reading assessments</div>
                                <button class="expand-btn">Show Details</button>
                            </div>
                            
                            <div class="metric-card">
                                <h5>Reading Growth</h5>
                                <div class="metric-value">82%</div>
                                <div class="metric-description">Percentage of students meeting growth targets in reading</div>
                                <button class="expand-btn">Show Details</button>
                            </div>
                            
                            <div class="metric-card">
                                <h5>Writing Proficiency</h5>
                                <div class="metric-value">68%</div>
                                <div class="metric-description">Percentage of students scoring proficient or above in writing assessments</div>
                                <button class="expand-btn">Show Details</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="responsive-features">
                <h5>Responsive Features</h5>
                <ul>
                    <li>Fluid container widths that adapt to screen size</li>
                    <li>Flexible grid system for metrics that reorients on smaller screens</li>
                    <li>Touch-friendly navigation with appropriate target sizes</li>
                    <li>Responsive typography that scales proportionally</li>
                    <li>Compact header design on mobile that maintains all essential information</li>
                </ul>
            </div>
        </div>
        
        <div class="example-section">
            <h4>2. Responsive Data Visualization</h4>
            
            <div class="visualization-example">
                <div class="responsive-toggle">
                    <div class="device-label desktop-label">Desktop View:</div>
                    <div class="chart-container desktop">
                        <div class="chart-example">
                            <div class="chart-title">
                                <h5>Reading Proficiency by Subgroup</h5>
                            </div>
                            <div class="chart-visualization horizontal-chart">
                                <div class="chart-bar" style="width: 75%;">
                                    <span class="bar-label">All Students</span>
                                    <span class="bar-value">75%</span>
                                </div>
                                <div class="chart-bar" style="width: 68%;">
                                    <span class="bar-label">Econ. Disadvantaged</span>
                                    <span class="bar-value">68%</span>
                                </div>
                                <div class="chart-bar" style="width: 54%;">
                                    <span class="bar-label">Students with Disabilities</span>
                                    <span class="bar-value">54%</span>
                                </div>
                                <div class="chart-bar" style="width: 61%;">
                                    <span class="bar-label">English Learners</span>
                                    <span class="bar-value">61%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="device-label mobile-label">Mobile View:</div>
                    <div class="chart-container mobile">
                        <div class="chart-example">
                            <div class="chart-title">
                                <h5>Reading Proficiency by Subgroup</h5>
                            </div>
                            <div class="chart-visualization vertical-chart">
                                <div class="chart-row">
                                    <span class="row-label">All Students</span>
                                    <div class="row-bar-container">
                                        <div class="row-bar" style="width: 75%;"></div>
                                        <span class="row-value">75%</span>
                                    </div>
                                </div>
                                <div class="chart-row">
                                    <span class="row-label">Econ. Dis.</span>
                                    <div class="row-bar-container">
                                        <div class="row-bar" style="width: 68%;"></div>
                                        <span class="row-value">68%</span>
                                    </div>
                                </div>
                                <div class="chart-row">
                                    <span class="row-label">SWD</span>
                                    <div class="row-bar-container">
                                        <div class="row-bar" style="width: 54%;"></div>
                                        <span class="row-value">54%</span>
                                    </div>
                                </div>
                                <div class="chart-row">
                                    <span class="row-label">EL</span>
                                    <div class="row-bar-container">
                                        <div class="row-bar" style="width: 61%;"></div>
                                        <span class="row-value">61%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="responsive-features">
                    <h5>Mobile Optimization Features</h5>
                    <ul>
                        <li>Charts adapt to orientation based on screen size</li>
                        <li>Abbreviated labels on mobile to prevent crowding</li>
                        <li>Increased touch target sizes for mobile interactions</li>
                        <li>Consistent color use across responsive variations</li>
                        <li>Simplified visualizations maintain core information</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="example-section">
            <h4>3. Mobile-Optimized Tables</h4>
            
            <div class="table-example">
                <div class="responsive-toggle">
                    <div class="device-label desktop-label">Desktop View:</div>
                    <div class="table-container desktop">
                        <table class="data-table">
                            <caption>2023-24 Academic Performance Measures</caption>
                            <thead>
                                <tr>
                                    <th>Measure</th>
                                    <th>All Students</th>
                                    <th>Economically Disadvantaged</th>
                                    <th>Students with Disabilities</th>
                                    <th>English Learners</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th>Reading Proficiency</th>
                                    <td>75%</td>
                                    <td>68%</td>
                                    <td>54%</td>
                                    <td>61%</td>
                                </tr>
                                <tr>
                                    <th>Math Proficiency</th>
                                    <td>82%</td>
                                    <td>76%</td>
                                    <td>63%</td>
                                    <td>74%</td>
                                </tr>
                                <tr>
                                    <th>Science Proficiency</th>
                                    <td>70%</td>
                                    <td>65%</td>
                                    <td>52%</td>
                                    <td>59%</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="device-label mobile-label">Mobile View:</div>
                    <div class="table-container mobile">
                        <div class="card-table">
                            <div class="data-card">
                                <div class="card-header">Reading Proficiency</div>
                                <div class="card-content">
                                    <div class="card-row">
                                        <div class="card-label">All Students</div>
                                        <div class="card-value">75%</div>
                                    </div>
                                    <div class="card-row">
                                        <div class="card-label">Econ. Disadvantaged</div>
                                        <div class="card-value">68%</div>
                                    </div>
                                    <div class="card-row">
                                        <div class="card-label">Students with Disabilities</div>
                                        <div class="card-value">54%</div>
                                    </div>
                                    <div class="card-row">
                                        <div class="card-label">English Learners</div>
                                        <div class="card-value">61%</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="data-card">
                                <div class="card-header">Math Proficiency</div>
                                <div class="card-content">
                                    <div class="card-row">
                                        <div class="card-label">All Students</div>
                                        <div class="card-value">82%</div>
                                    </div>
                                    <div class="card-row">
                                        <div class="card-label">Econ. Disadvantaged</div>
                                        <div class="card-value">76%</div>
                                    </div>
                                    <div class="card-row">
                                        <div class="card-label">Students with Disabilities</div>
                                        <div class="card-value">63%</div>
                                    </div>
                                    <div class="card-row">
                                        <div class="card-label">English Learners</div>
                                        <div class="card-value">74%</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="responsive-features">
                    <h5>Mobile Table Features</h5>
                    <ul>
                        <li>Card-based layout for tables on mobile devices</li>
                        <li>Vertically stacked data eliminates horizontal scrolling</li>
                        <li>Clear visual hierarchy maintains data relationships</li>
                        <li>Consistent styling between desktop and mobile views</li>
                        <li>Touch-friendly spacing for all interactive elements</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="example-section">
            <h4>4. Mobile Progressive Disclosure</h4>
            
            <div class="progressive-example">
                <div class="mobile-frame">
                    <div class="mobile-header">
                        <div class="header-content">
                            <h5>Example Charter School</h5>
                            <div class="mobile-breadcrumb">Academic Framework &gt; Literacy</div>
                        </div>
                    </div>
                    
                    <div class="mobile-body">
                        <div class="mobile-section">
                            <div class="mobile-section-header">
                                <span class="section-title">Reading Proficiency</span>
                                <button class="mobile-toggle" aria-expanded="false">
                                    <span class="toggle-icon">+</span>
                                </button>
                            </div>
                            <div class="section-description">
                                Percentage of students scoring proficient or advanced on reading assessments.
                            </div>
                            <div class="collapsed-preview">
                                <div class="preview-value">75%</div>
                                <div class="preview-label">All Students</div>
                            </div>
                        </div>
                        
                        <div class="mobile-section expanded">
                            <div class="mobile-section-header">
                                <span class="section-title">Math Proficiency</span>
                                <button class="mobile-toggle" aria-expanded="true">
                                    <span class="toggle-icon">-</span>
                                </button>
                            </div>
                            <div class="section-description">
                                Percentage of students scoring proficient or advanced on math assessments.
                            </div>
                            <div class="section-content">
                                <div class="mobile-chart">
                                    <div class="chart-row">
                                        <span class="row-label">All Students</span>
                                        <div class="row-bar-container">
                                            <div class="row-bar" style="width: 82%;"></div>
                                            <span class="row-value">82%</span>
                                        </div>
                                    </div>
                                    <div class="chart-row">
                                        <span class="row-label">Econ. Dis.</span>
                                        <div class="row-bar-container">
                                            <div class="row-bar" style="width: 76%;"></div>
                                            <span class="row-value">76%</span>
                                        </div>
                                    </div>
                                    <div class="chart-row">
                                        <span class="row-label">SWD</span>
                                        <div class="row-bar-container">
                                            <div class="row-bar" style="width: 63%;"></div>
                                            <span class="row-value">63%</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mobile-expand-details">
                                    <button class="details-toggle">Show Technical Details</button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mobile-section">
                            <div class="mobile-section-header">
                                <span class="section-title">Science Proficiency</span>
                                <button class="mobile-toggle" aria-expanded="false">
                                    <span class="toggle-icon">+</span>
                                </button>
                            </div>
                            <div class="section-description">
                                Percentage of students scoring proficient or advanced on science assessments.
                            </div>
                            <div class="collapsed-preview">
                                <div class="preview-value">70%</div>
                                <div class="preview-label">All Students</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="responsive-features">
                    <h5>Mobile Progressive Disclosure Features</h5>
                    <ul>
                        <li>Compact section headers with expanded content on demand</li>
                        <li>Preview of key metrics visible without expanding</li>
                        <li>Touch-optimized toggle targets (minimum 44px)</li>
                        <li>Streamlined navigation appropriate for smaller screens</li>
                        <li>Multi-level disclosure preserves complex data relationships</li>
                        <li>Optimized for one-handed operation on mobile devices</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    
    <script>
    function switchView(viewType) {
        const deviceView = document.getElementById('device-view');
        const buttons = document.querySelectorAll('.device-btn');
        
        // Remove active class from all buttons
        buttons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to selected button
        document.querySelector(`.device-btn[onclick="switchView('${viewType}')"]`).classList.add('active');
        
        // Update the view class
        deviceView.innerHTML = deviceView.innerHTML.replace(/device (desktop|tablet|mobile)-view/g, `device ${viewType}-view`);
    }
    </script>
    
    <style>
    .mobile-examples {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 900px;
        margin: 0 auto;
        color: #333;
    }
    
    .example-section {
        margin-bottom: 3rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .example-section h4 {
        margin: 0;
        padding: 1rem;
        background-color: #2a4d69;
        color: white;
    }
    
    .device-switcher {
        display: flex;
        justify-content: center;
        margin: 1.5rem 0;
        gap: 0.5rem;
    }
    
    .device-btn {
        background-color: #e7eff6;
        border: 1px solid #2a4d69;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        font-weight: bold;
        color: #2a4d69;
    }
    
    .device-btn.active {
        background-color: #2a4d69;
        color: white;
    }
    
    .device-container {
        border: 1px solid #e0e0e0;
        padding: 1rem;
        margin: 1rem;
        background-color: #f8f9fa;
        border-radius: 4px;
        overflow: hidden;
    }
    
    /* Device simulation */
    .device {
        margin: 0 auto;
        padding: 1rem;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .device.desktop-view {
        width: 90%;
        max-width: 800px;
    }
    
    .device.tablet-view {
        width: 600px;
        max-width: 90%;
    }
    
    .device.mobile-view {
        width: 320px;
        max-width: 90%;
    }
    
    /* Responsive example */
    .report-header {
        margin-bottom: 1.5rem;
    }
    
    .report-header h2 {
        margin: 0 0 0.5rem 0;
        color: #2a4d69;
    }
    
    .school-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 0.5rem;
    }
    
    .school-year, .school-tier {
        background-color: #e7eff6;
        padding: 0.25rem 0.75rem;
        border-radius: 4px;
        font-size: 0.9rem;
        font-weight: bold;
        color: #2a4d69;
    }
    
    .school-tier {
        background-color: #4b86b4;
        color: white;
    }
    
    .report-description {
        margin: 0;
        color: #555;
    }
    
    .category-navigation {
        margin-bottom: 1.5rem;
    }
    
    .category-navigation ul {
        display: flex;
        list-style: none;
        padding: 0;
        margin: 0;
        border-bottom: 1px solid #e0e0e0;
        overflow-x: auto;
    }
    
    .category-navigation li {
        margin-right: 0.5rem;
    }
    
    .category-navigation a {
        display: block;
        padding: 0.75rem 1rem;
        color: #2a4d69;
        text-decoration: none;
        border-bottom: 3px solid transparent;
    }
    
    .category-navigation a.active {
        border-bottom-color: #2a4d69;
        font-weight: bold;
    }
    
    .multi-metrics-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
    }
    
    .metric-card {
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        padding: 1rem;
        background-color: #f8f9fa;
    }
    
    .metric-card h5 {
        margin: 0 0 0.75rem 0;
        color: #2a4d69;
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #4b86b4;
        margin-bottom: 0.75rem;
    }
    
    .metric-description {
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 1rem;
    }
    
    .expand-btn {
        background-color: #4b86b4;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        width: 100%;
    }
    
    /* Mobile-specific styles */
    .desktop-view .multi-metrics-container {
        grid-template-columns: repeat(3, 1fr);
    }
    
    .tablet-view .multi-metrics-container {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .mobile-view .multi-metrics-container {
        grid-template-columns: 1fr;
    }
    
    .mobile-view .report-header h2 {
        font-size: 1.2rem;
    }
    
    .mobile-view .category-navigation ul {
        padding-bottom: 0.5rem;
    }
    
    .mobile-view .category-navigation a {
        padding: 0.5rem 0.75rem;
        font-size: 0.9rem;
    }
    
    /* Responsive features section */
    .responsive-features {
        padding: 1rem;
        background-color: #f0f7ff;
        margin: 1rem;
        border-radius: 4px;
    }
    
    .responsive-features h5 {
        margin-top: 0;
        color: #2a4d69;
    }
    
    .responsive-features ul {
        margin-bottom: 0;
    }
    
    /* Chart examples */
    .responsive-toggle {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        padding: 1rem;
        justify-content: center;
    }
    
    .device-label {
        font-weight: bold;
        color: #2a4d69;
        margin-bottom: 0.5rem;
    }
    
    .chart-container {
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 1rem;
        background-color: white;
    }
    
    .chart-example {
        width: 100%;
    }
    
    .chart-title {
        margin-bottom: 1rem;
    }
    
    .chart-title h5 {
        margin: 0;
        color: #2a4d69;
    }
    
    /* Horizontal chart (desktop) */
    .horizontal-chart {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .chart-bar {
        height: 25px;
        background-color: #4b86b4;
        border-radius: 4px;
        position: relative;
    }
    
    .bar-label {
        position: absolute;
        left: -150px;
        top: 50%;
        transform: translateY(-50%);
        width: 140px;
        text-align: right;
        color: #333;
        font-size: 0.9rem;
    }
    
    .bar-value {
        position: absolute;
        right: -40px;
        top: 50%;
        transform: translateY(-50%);
        font-weight: bold;
        color: #2a4d69;
    }
    
    /* Vertical chart (mobile) */
    .vertical-chart {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    .chart-row {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .row-label {
        width: 80px;
        font-size: 0.9rem;
        color: #333;
    }
    
    .row-bar-container {
        flex-grow: 1;
        height: 25px;
        background-color: #e7eff6;
        border-radius: 4px;
        position: relative;
    }
    
    .row-bar {
        height: 100%;
        background-color: #4b86b4;
        border-radius: 4px;
    }
    
    .row-value {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        font-weight: bold;
        color: #2a4d69;
        font-size: 0.9rem;
    }
    
    /* Table examples */
    .data-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .data-table caption {
        text-align: left;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: #2a4d69;
    }
    
    .data-table th, .data-table td {
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
        text-align: left;
    }
    
    .data-table th {
        background-color: #e7eff6;
    }
    
    /* Card table (mobile) */
    .card-table {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .data-card {
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        overflow: hidden;
    }
    
    .card-header {
        padding: 0.75rem;
        background-color: #e7eff6;
        font-weight: bold;
        color: #2a4d69;
    }
    
    .card-content {
        padding: 0.5rem;
    }
    
    .card-row {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .card-row:last-child {
        border-bottom: none;
    }
    
    .card-label {
        font-size: 0.9rem;
        color: #555;
    }
    
    .card-value {
        font-weight: bold;
        color: #2a4d69;
    }
    
    /* Mobile progressive disclosure */
    .progressive-example {
        padding: 1rem;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 2rem;
    }
    
    .mobile-frame {
        width: 320px;
        border: 10px solid #333;
        border-radius: 20px;
        overflow: hidden;
        background-color: white;
    }
    
    .mobile-header {
        background-color: #2a4d69;
        color: white;
        padding: 1rem;
    }
    
    .header-content h5 {
        margin: 0 0 0.25rem 0;
    }
    
    .mobile-breadcrumb {
        font-size: 0.8rem;
        opacity: 0.9;
    }
    
    .mobile-body {
        padding: 1rem;
        max-height: 500px;
        overflow-y: auto;
    }
    
    .mobile-section {
        margin-bottom: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
    }
    
    .mobile-section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background-color: #f0f7ff;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .section-title {
        font-weight: bold;
        color: #2a4d69;
    }
    
    .mobile-toggle {
        width: 32px;
        height: 32px;
        background-color: #4b86b4;
        color: white;
        border: none;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
    }
    
    .section-description {
        padding: 0.75rem;
        font-size: 0.9rem;
        color: #666;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .collapsed-preview {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background-color: #f8f9fa;
    }
    
    .preview-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #4b86b4;
    }
    
    .preview-label {
        font-size: 0.9rem;
        color: #666;
    }
    
    .section-content {
        padding: 0.75rem;
        background-color: #f8f9fa;
    }
    
    .mobile-chart {
        margin: 0.5rem 0 1rem 0;
    }
    
    .mobile-expand-details {
        text-align: center;
        margin-top: 1rem;
    }
    
    .details-toggle {
        background-color: #e7eff6;
        color: #2a4d69;
        border: 1px solid #4b86b4;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        font-size: 0.9rem;
    }
    </style>
    """
    
    return html

# Generate the mobile optimization examples
mobile_examples = create_mobile_optimization_demo()
HTML(mobile_examples)
```
